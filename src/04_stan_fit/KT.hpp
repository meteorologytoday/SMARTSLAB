// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace KT_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "/home/tienyiah/projects/SMARTSLAB/src/04_stan_fit/KT.stan");
    reader.add_event(91, 89, "end", "/home/tienyiah/projects/SMARTSLAB/src/04_stan_fit/KT.stan");
    return reader;
}

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
repeat_fill(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& input,
                const int& period,
                const int& len, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        validate_non_negative_index("output", "len", len);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  output(static_cast<Eigen::VectorXd::Index>(len));
        (void) output;  // dummy to suppress unused var warning

        stan::math::initialize(output, DUMMY_VAR__);
        stan::math::fill(output,DUMMY_VAR__);


        current_statement_begin__ = 4;
        for (int i = 1; i <= len; ++i) {

            current_statement_begin__ = 5;
            stan::model::assign(output, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        get_base1(input,(modulus((i - 1),period) + 1),"input",1), 
                        "assigning variable output");
        }
        current_statement_begin__ = 8;
        return stan::math::promote_scalar<fun_return_scalar_t__>(output);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct repeat_fill_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& input,
                const int& period,
                const int& len, std::ostream* pstream__) const {
        return repeat_fill(input, period, len, pstream__);
    }
};

class KT_model : public prob_grad {
private:
    int N;
    int period;
    double dt;
    vector_d theta;
    vector_d F;
    int yrs;
    int trimmed_N;
    vector_d F_s;
    vector_d theta_s;
    vector_d dthetadt_s;
public:
    KT_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    KT_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "KT_model_namespace::KT_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "period", "int", context__.to_vec());
            period = int(0);
            vals_i__ = context__.vals_i("period");
            pos__ = 0;
            period = vals_i__[pos__++];
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "dt", "double", context__.to_vec());
            dt = double(0);
            vals_r__ = context__.vals_r("dt");
            pos__ = 0;
            dt = vals_r__[pos__++];
            current_statement_begin__ = 16;
            validate_non_negative_index("theta", "N", N);
            context__.validate_dims("data initialization", "theta", "vector_d", context__.to_vec(N));
            validate_non_negative_index("theta", "N", N);
            theta = vector_d(static_cast<Eigen::VectorXd::Index>(N));
            vals_r__ = context__.vals_r("theta");
            pos__ = 0;
            size_t theta_i_vec_lim__ = N;
            for (size_t i_vec__ = 0; i_vec__ < theta_i_vec_lim__; ++i_vec__) {
                theta[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("F", "N", N);
            context__.validate_dims("data initialization", "F", "vector_d", context__.to_vec(N));
            validate_non_negative_index("F", "N", N);
            F = vector_d(static_cast<Eigen::VectorXd::Index>(N));
            vals_r__ = context__.vals_r("F");
            pos__ = 0;
            size_t F_i_vec_lim__ = N;
            for (size_t i_vec__ = 0; i_vec__ < F_i_vec_lim__; ++i_vec__) {
                F[i_vec__] = vals_r__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 13;
            check_greater_or_equal(function__,"N",N,0);
            current_statement_begin__ = 14;
            check_greater_or_equal(function__,"period",period,1);
            current_statement_begin__ = 15;
            check_greater_or_equal(function__,"dt",dt,0);
            current_statement_begin__ = 16;
            current_statement_begin__ = 17;
            // initialize data variables
            current_statement_begin__ = 21;
            yrs = int(0);
            stan::math::fill(yrs, std::numeric_limits<int>::min());
            current_statement_begin__ = 22;
            trimmed_N = int(0);
            stan::math::fill(trimmed_N, std::numeric_limits<int>::min());
            current_statement_begin__ = 23;
            validate_non_negative_index("F_s", "trimmed_N", trimmed_N);
            F_s = vector_d(static_cast<Eigen::VectorXd::Index>(trimmed_N));
            stan::math::fill(F_s,DUMMY_VAR__);
            current_statement_begin__ = 24;
            validate_non_negative_index("theta_s", "trimmed_N", trimmed_N);
            theta_s = vector_d(static_cast<Eigen::VectorXd::Index>(trimmed_N));
            stan::math::fill(theta_s,DUMMY_VAR__);
            current_statement_begin__ = 25;
            validate_non_negative_index("dthetadt_s", "trimmed_N", trimmed_N);
            dthetadt_s = vector_d(static_cast<Eigen::VectorXd::Index>(trimmed_N));
            stan::math::fill(dthetadt_s,DUMMY_VAR__);

            current_statement_begin__ = 27;
            if (as_bool(logical_neq(modulus(yrs,period),0))) {

                current_statement_begin__ = 28;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "N = ";
                errmsg_stream__ << N;
                errmsg_stream__ << " is not multiple of ";
                errmsg_stream__ << period;
                throw std::domain_error(errmsg_stream__.str());
            }
            current_statement_begin__ = 30;
            stan::math::assign(yrs, divide(N,period));
            current_statement_begin__ = 32;
            stan::math::assign(trimmed_N, (N - (2 * period)));
            current_statement_begin__ = 35;
            for (int i = 1; i <= trimmed_N; ++i) {

                current_statement_begin__ = 36;
                stan::model::assign(F_s, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((get_base1(F,(i + period),"F",1) + get_base1(F,((i + period) + 1),"F",1)) / 2.0), 
                            "assigning variable F_s");
                current_statement_begin__ = 37;
                stan::model::assign(theta_s, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((get_base1(theta,(i + period),"theta",1) + get_base1(theta,((i + period) + 1),"theta",1)) / 2.0), 
                            "assigning variable theta_s");
            }
            current_statement_begin__ = 40;
            for (int i = 1; i <= trimmed_N; ++i) {

                current_statement_begin__ = 41;
                stan::model::assign(dthetadt_s, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((get_base1(theta,((i + period) + 1),"theta",1) - get_base1(theta,(i + period),"theta",1)) / dt), 
                            "assigning variable dthetadt_s");
            }

            // validate transformed data
            current_statement_begin__ = 21;
            current_statement_begin__ = 22;
            current_statement_begin__ = 23;
            current_statement_begin__ = 24;
            current_statement_begin__ = 25;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 48;
            validate_non_negative_index("h", "period", period);
            num_params_r__ += period;
            current_statement_begin__ = 49;
            validate_non_negative_index("Q_s", "period", period);
            num_params_r__ += period;
            current_statement_begin__ = 50;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~KT_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("h")))
            throw std::runtime_error("variable h missing");
        vals_r__ = context__.vals_r("h");
        pos__ = 0U;
        validate_non_negative_index("h", "period", period);
        context__.validate_dims("initialization", "h", "double", context__.to_vec(period));
        std::vector<double> h(period,double(0));
        for (int i0__ = 0U; i0__ < period; ++i0__)
            h[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < period; ++i0__)
            try {
            writer__.scalar_lub_unconstrain(0,200,h[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h: ") + e.what());
        }

        if (!(context__.contains_r("Q_s")))
            throw std::runtime_error("variable Q_s missing");
        vals_r__ = context__.vals_r("Q_s");
        pos__ = 0U;
        validate_non_negative_index("Q_s", "period", period);
        context__.validate_dims("initialization", "Q_s", "double", context__.to_vec(period));
        std::vector<double> Q_s(period,double(0));
        for (int i0__ = 0U; i0__ < period; ++i0__)
            Q_s[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < period; ++i0__)
            try {
            writer__.scalar_unconstrain(Q_s[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable Q_s: ") + e.what());
        }

        if (!(context__.contains_r("Td")))
            throw std::runtime_error("variable Td missing");
        vals_r__ = context__.vals_r("Td");
        pos__ = 0U;
        context__.validate_dims("initialization", "Td", "double", context__.to_vec());
        double Td(0);
        Td = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(Td);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable Td: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            vector<local_scalar_t__> h;
            size_t dim_h_0__ = period;
            h.reserve(dim_h_0__);
            for (size_t k_0__ = 0; k_0__ < dim_h_0__; ++k_0__) {
                if (jacobian__)
                    h.push_back(in__.scalar_lub_constrain(0,200,lp__));
                else
                    h.push_back(in__.scalar_lub_constrain(0,200));
            }

            vector<local_scalar_t__> Q_s;
            size_t dim_Q_s_0__ = period;
            Q_s.reserve(dim_Q_s_0__);
            for (size_t k_0__ = 0; k_0__ < dim_Q_s_0__; ++k_0__) {
                if (jacobian__)
                    Q_s.push_back(in__.scalar_constrain(lp__));
                else
                    Q_s.push_back(in__.scalar_constrain());
            }

            local_scalar_t__ Td;
            (void) Td;  // dummy to suppress unused var warning
            if (jacobian__)
                Td = in__.scalar_constrain(lp__);
            else
                Td = in__.scalar_constrain();


            // transformed parameters
            current_statement_begin__ = 55;
            validate_non_negative_index("we_s", "trimmed_N", trimmed_N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  we_s(static_cast<Eigen::VectorXd::Index>(trimmed_N));
            (void) we_s;  // dummy to suppress unused var warning

            stan::math::initialize(we_s, DUMMY_VAR__);
            stan::math::fill(we_s,DUMMY_VAR__);
            current_statement_begin__ = 56;
            validate_non_negative_index("dhds_s", "trimmed_N", trimmed_N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  dhds_s(static_cast<Eigen::VectorXd::Index>(trimmed_N));
            (void) dhds_s;  // dummy to suppress unused var warning

            stan::math::initialize(dhds_s, DUMMY_VAR__);
            stan::math::fill(dhds_s,DUMMY_VAR__);
            current_statement_begin__ = 57;
            validate_non_negative_index("h_s", "trimmed_N", trimmed_N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  h_s(static_cast<Eigen::VectorXd::Index>(trimmed_N));
            (void) h_s;  // dummy to suppress unused var warning

            stan::math::initialize(h_s, DUMMY_VAR__);
            stan::math::fill(h_s,DUMMY_VAR__);
            current_statement_begin__ = 58;
            validate_non_negative_index("lambda", "trimmed_N", trimmed_N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda(static_cast<Eigen::VectorXd::Index>(trimmed_N));
            (void) lambda;  // dummy to suppress unused var warning

            stan::math::initialize(lambda, DUMMY_VAR__);
            stan::math::fill(lambda,DUMMY_VAR__);
            current_statement_begin__ = 59;
            validate_non_negative_index("epsilon", "trimmed_N", trimmed_N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  epsilon(static_cast<Eigen::VectorXd::Index>(trimmed_N));
            (void) epsilon;  // dummy to suppress unused var warning

            stan::math::initialize(epsilon, DUMMY_VAR__);
            stan::math::fill(epsilon,DUMMY_VAR__);


            current_statement_begin__ = 61;
            for (int i = 1; i <= (period - 1); ++i) {

                current_statement_begin__ = 62;
                stan::model::assign(h_s, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((get_base1(h,i,"h",1) + get_base1(h,(i + 1),"h",1)) / 2.0), 
                            "assigning variable h_s");
            }
            current_statement_begin__ = 64;
            stan::model::assign(h_s, 
                        stan::model::cons_list(stan::model::index_uni(period), stan::model::nil_index_list()), 
                        ((get_base1(h,period,"h",1) + get_base1(h,1,"h",1)) / 2.0), 
                        "assigning variable h_s");
            current_statement_begin__ = 68;
            for (int i = 1; i <= (period - 1); ++i) {

                current_statement_begin__ = 69;
                stan::model::assign(dhds_s, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((get_base1(h,(i + 1),"h",1) - get_base1(h,i,"h",1)) / dt), 
                            "assigning variable dhds_s");
            }
            current_statement_begin__ = 71;
            stan::model::assign(dhds_s, 
                        stan::model::cons_list(stan::model::index_uni(period), stan::model::nil_index_list()), 
                        ((get_base1(h,1,"h",1) - get_base1(h,period,"h",1)) / dt), 
                        "assigning variable dhds_s");
            current_statement_begin__ = 74;
            for (int i = 1; i <= period; ++i) {

                current_statement_begin__ = 75;
                stan::model::assign(we_s, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (logical_gt(get_base1(dhds_s,i,"dhds_s",1),0) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(dhds_s,i,"dhds_s",1)) : stan::math::promote_scalar<local_scalar_t__>(0) ), 
                            "assigning variable we_s");
            }
            current_statement_begin__ = 78;
            stan::math::assign(we_s, stan::model::deep_copy(repeat_fill(we_s,period,trimmed_N, pstream__)));
            current_statement_begin__ = 79;
            stan::math::assign(h_s, stan::model::deep_copy(repeat_fill(h_s,period,trimmed_N, pstream__)));
            current_statement_begin__ = 82;
            stan::math::assign(epsilon, subtract(add(elt_multiply(h_s,dthetadt_s),elt_multiply(we_s,subtract(theta_s,Td))),F_s));

            // validate transformed parameters
            for (int i0__ = 0; i0__ < trimmed_N; ++i0__) {
                if (stan::math::is_uninitialized(we_s(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: we_s" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < trimmed_N; ++i0__) {
                if (stan::math::is_uninitialized(dhds_s(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: dhds_s" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < trimmed_N; ++i0__) {
                if (stan::math::is_uninitialized(h_s(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: h_s" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < trimmed_N; ++i0__) {
                if (stan::math::is_uninitialized(lambda(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lambda" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < trimmed_N; ++i0__) {
                if (stan::math::is_uninitialized(epsilon(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: epsilon" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 55;
            current_statement_begin__ = 56;
            current_statement_begin__ = 57;
            current_statement_begin__ = 58;
            current_statement_begin__ = 59;

            // model body

            current_statement_begin__ = 86;
            for (int i = 1; i <= trimmed_N; ++i) {

                current_statement_begin__ = 87;
                lp_accum__.add(normal_log<propto__>(get_base1(epsilon,i,"epsilon",1), 0, 1.0));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("h");
        names__.push_back("Q_s");
        names__.push_back("Td");
        names__.push_back("we_s");
        names__.push_back("dhds_s");
        names__.push_back("h_s");
        names__.push_back("lambda");
        names__.push_back("epsilon");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(period);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(period);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(trimmed_N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(trimmed_N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(trimmed_N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(trimmed_N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(trimmed_N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "KT_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<double> h;
        size_t dim_h_0__ = period;
        for (size_t k_0__ = 0; k_0__ < dim_h_0__; ++k_0__) {
            h.push_back(in__.scalar_lub_constrain(0,200));
        }
        vector<double> Q_s;
        size_t dim_Q_s_0__ = period;
        for (size_t k_0__ = 0; k_0__ < dim_Q_s_0__; ++k_0__) {
            Q_s.push_back(in__.scalar_constrain());
        }
        double Td = in__.scalar_constrain();
            for (int k_0__ = 0; k_0__ < period; ++k_0__) {
            vars__.push_back(h[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < period; ++k_0__) {
            vars__.push_back(Q_s[k_0__]);
            }
        vars__.push_back(Td);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 55;
            validate_non_negative_index("we_s", "trimmed_N", trimmed_N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  we_s(static_cast<Eigen::VectorXd::Index>(trimmed_N));
            (void) we_s;  // dummy to suppress unused var warning

            stan::math::initialize(we_s, DUMMY_VAR__);
            stan::math::fill(we_s,DUMMY_VAR__);
            current_statement_begin__ = 56;
            validate_non_negative_index("dhds_s", "trimmed_N", trimmed_N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  dhds_s(static_cast<Eigen::VectorXd::Index>(trimmed_N));
            (void) dhds_s;  // dummy to suppress unused var warning

            stan::math::initialize(dhds_s, DUMMY_VAR__);
            stan::math::fill(dhds_s,DUMMY_VAR__);
            current_statement_begin__ = 57;
            validate_non_negative_index("h_s", "trimmed_N", trimmed_N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  h_s(static_cast<Eigen::VectorXd::Index>(trimmed_N));
            (void) h_s;  // dummy to suppress unused var warning

            stan::math::initialize(h_s, DUMMY_VAR__);
            stan::math::fill(h_s,DUMMY_VAR__);
            current_statement_begin__ = 58;
            validate_non_negative_index("lambda", "trimmed_N", trimmed_N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda(static_cast<Eigen::VectorXd::Index>(trimmed_N));
            (void) lambda;  // dummy to suppress unused var warning

            stan::math::initialize(lambda, DUMMY_VAR__);
            stan::math::fill(lambda,DUMMY_VAR__);
            current_statement_begin__ = 59;
            validate_non_negative_index("epsilon", "trimmed_N", trimmed_N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  epsilon(static_cast<Eigen::VectorXd::Index>(trimmed_N));
            (void) epsilon;  // dummy to suppress unused var warning

            stan::math::initialize(epsilon, DUMMY_VAR__);
            stan::math::fill(epsilon,DUMMY_VAR__);


            current_statement_begin__ = 61;
            for (int i = 1; i <= (period - 1); ++i) {

                current_statement_begin__ = 62;
                stan::model::assign(h_s, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((get_base1(h,i,"h",1) + get_base1(h,(i + 1),"h",1)) / 2.0), 
                            "assigning variable h_s");
            }
            current_statement_begin__ = 64;
            stan::model::assign(h_s, 
                        stan::model::cons_list(stan::model::index_uni(period), stan::model::nil_index_list()), 
                        ((get_base1(h,period,"h",1) + get_base1(h,1,"h",1)) / 2.0), 
                        "assigning variable h_s");
            current_statement_begin__ = 68;
            for (int i = 1; i <= (period - 1); ++i) {

                current_statement_begin__ = 69;
                stan::model::assign(dhds_s, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((get_base1(h,(i + 1),"h",1) - get_base1(h,i,"h",1)) / dt), 
                            "assigning variable dhds_s");
            }
            current_statement_begin__ = 71;
            stan::model::assign(dhds_s, 
                        stan::model::cons_list(stan::model::index_uni(period), stan::model::nil_index_list()), 
                        ((get_base1(h,1,"h",1) - get_base1(h,period,"h",1)) / dt), 
                        "assigning variable dhds_s");
            current_statement_begin__ = 74;
            for (int i = 1; i <= period; ++i) {

                current_statement_begin__ = 75;
                stan::model::assign(we_s, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (logical_gt(get_base1(dhds_s,i,"dhds_s",1),0) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(dhds_s,i,"dhds_s",1)) : stan::math::promote_scalar<local_scalar_t__>(0) ), 
                            "assigning variable we_s");
            }
            current_statement_begin__ = 78;
            stan::math::assign(we_s, stan::model::deep_copy(repeat_fill(we_s,period,trimmed_N, pstream__)));
            current_statement_begin__ = 79;
            stan::math::assign(h_s, stan::model::deep_copy(repeat_fill(h_s,period,trimmed_N, pstream__)));
            current_statement_begin__ = 82;
            stan::math::assign(epsilon, subtract(add(elt_multiply(h_s,dthetadt_s),elt_multiply(we_s,subtract(theta_s,Td))),F_s));

            // validate transformed parameters
            current_statement_begin__ = 55;
            current_statement_begin__ = 56;
            current_statement_begin__ = 57;
            current_statement_begin__ = 58;
            current_statement_begin__ = 59;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_0__ = 0; k_0__ < trimmed_N; ++k_0__) {
            vars__.push_back(we_s[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < trimmed_N; ++k_0__) {
            vars__.push_back(dhds_s[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < trimmed_N; ++k_0__) {
            vars__.push_back(h_s[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < trimmed_N; ++k_0__) {
            vars__.push_back(lambda[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < trimmed_N; ++k_0__) {
            vars__.push_back(epsilon[k_0__]);
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "KT_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= period; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= period; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Q_s" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "Td";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= trimmed_N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "we_s" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= trimmed_N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dhds_s" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= trimmed_N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "h_s" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= trimmed_N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= trimmed_N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "epsilon" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= period; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= period; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Q_s" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "Td";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= trimmed_N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "we_s" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= trimmed_N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dhds_s" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= trimmed_N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "h_s" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= trimmed_N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= trimmed_N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "epsilon" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef KT_model_namespace::KT_model stan_model;

