include("MLMML.jl")
using .MLMML
using PyPlot


PERIOD = 86400.0 * 360.0
J0 = - 100.0 * MLMML.α * MLMML.g / MLMML.ρ / MLMML.c_p
ω  = 2π / PERIOD
h0 = 500.0
m  = 30.0 / 5000.0
k  = MLMML.getTKE(fric_u=MLMML.getFricU(ua=0.0))
n  = 0.2 
sol = t -> (m * h0)^(-1.0) * (√(k^2.0 + (2.0*m*h0^2.0*(-J0)*n)/ω * (1.0 - cos(ω*t))) - k)
ts = collect(Float64, range(0.0, stop=180.0*86400.0, length=1000))
ana_h = h0 .+ sol.(ts)

using DifferentialEquations
f(h, p, t) = - h * J0 * n * sin(ω*t) / (m * (h^2.0 - h0^2.0) / 2.0 + k)
prob = ODEProblem(f, h0, (ts[1], ts[end]))
num_h = solve(prob, Tsit5(), reltol=1e-8, abstol=1e-8)

# dh/dt
ana_dhdt = - ana_h * J0 .* sin.(ω*ts) * n ./ (m/2.0 * (ana_h.^2.0 .- h0^2.0) .+ k)
num_dhdt = (ana_h[2:end] - ana_h[1:end-1]) / (ts[2] - ts[1])

fig, ax = plt[:subplots](2, 1, sharex=true)
ax[1][:plot](ts/86400.0, - (ana_h .- h0), label="analytical")
ax[1][:plot](num_h.t/86400.0, - (num_h.u .- h0), "--", label="numerical")
ax[1][:legend]()

ax[2][:plot](ts/86400.0, ana_dhdt, label="analytical")
ax[2][:plot]((ts[2:end] + ts[1:end-1])/2.0/86400.0, num_dhdt, "--", label="numerical")
ax[2][:legend]()
plt[:show]()
